
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model InviteToReview {
  id String @id

  validDays Int

  answerd Boolean @default(false)

  createdAt DateTime @default(now())

  review Review?

  employer_id String
  employer Employer @relation(fields: [employer_id], references: [id])

  @@map("invitesToReview")
}

model User {
  id String @id
  firstName String @default("Unknow")
  lastName String @default("")
  email String
  password String

  role String @default("CANDIDATE")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Review {
  id String @id

  invite_id String @unique
  invite InviteToReview @relation(fields: [invite_id], references: [id])

  nps Int

  jobTitle String
  description String?
  category String
  jobLink String?

  candidate_id String
  candidate Candidate @relation(fields: [candidate_id], references: [id])

  company_id String
  company Company @relation(fields: [company_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("reviews")
}

model Candidate {
  id String @id

  user_id String
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("candidates")
}

model Company {
  id String @id

  name String
  cnpj String @unique

  avatar String?

  site String?
  type String @default("OTHER")
  description String?

  reviews Review[]
  users Employer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("companies")
}

model Employer {
  id String @id

  access_level String @default("EDITOR") // ADMIN ou EDITOR

  user_id  String @unique
  company_id  String

  company Company @relation(fields: [company_id], references: [id])

  invites InviteToReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("employers")
}

